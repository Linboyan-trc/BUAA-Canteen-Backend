# Generated by Django 4.2.3 on 2024-11-25 10:30

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cafeteria', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('post', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': '用户名已存在'}, max_length=20, unique=True, verbose_name='用户名')),
                ('password', models.CharField(max_length=256, verbose_name='密码')),
                ('email', models.EmailField(error_messages={'unique': '邮箱已存在'}, max_length=255, unique=True, verbose_name='邮箱')),
                ('gender', models.CharField(choices=[('null', '沃尔玛购物袋'), ('male', '男'), ('female', '女')], default='null', max_length=6, verbose_name='性别')),
                ('introduction', models.TextField(default='这个人很懒，什么都没有留下', max_length=200, verbose_name='个人简介')),
                ('avatar', models.ImageField(default='avatar/default.png', upload_to='avatar/', verbose_name='头像')),
                ('isDelete', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'user',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PostCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('collector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_collector', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_collections', to='post.post')),
            ],
            options={
                'verbose_name': '用户帖子收藏',
                'verbose_name_plural': '用户帖子收藏',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EatCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('collector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eat_collector', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eat_collections', to='post.post')),
            ],
            options={
                'verbose_name': '用户吃过收藏',
                'verbose_name_plural': '用户吃过收藏',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CounterCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('collector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counter_collector', to=settings.AUTH_USER_MODEL)),
                ('counter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counter_collections', to='cafeteria.counter')),
            ],
            options={
                'verbose_name': '用户窗口收藏',
                'verbose_name_plural': '用户窗口收藏',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CafeteriaCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('cafeteria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cafeteria_collections', to='cafeteria.cafeteria')),
                ('collector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cafeteria_collector', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户食堂收藏',
                'verbose_name_plural': '用户食堂收藏',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Auth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_at', models.DateTimeField(auto_now=True, verbose_name='登录时间')),
                ('expires_at', models.DateTimeField(verbose_name='过期时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auth_info', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='user',
            name='cafeteria_collections',
            field=models.ManyToManyField(blank=True, related_name='收藏食堂列表', through='user.CafeteriaCollection', to='cafeteria.cafeteria'),
        ),
        migrations.AddField(
            model_name='user',
            name='counter_collections',
            field=models.ManyToManyField(blank=True, related_name='收藏窗口列表', through='user.CounterCollection', to='cafeteria.counter'),
        ),
        migrations.AddField(
            model_name='user',
            name='eat_collections',
            field=models.ManyToManyField(blank=True, related_name='eaten_by', through='user.EatCollection', to='post.post'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='post_collections',
            field=models.ManyToManyField(blank=True, related_name='collected_by', through='user.PostCollection', to='post.post'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
